{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","App.module.css","redux/phonebook/contacts-actions.js","redux/phonebook/contacts-operations.js","components/ContactForm/ContactForm.js","redux/phonebook/contacts-selectors.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/phonebook/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","name","number","dispatch","contact","post","then","data","catch","error","id","delete","get","ContactForm","state","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","contacts","items","find","toLowerCase","onSubmit","message","alert","className","style","contactForm","this","labelItem","type","onChange","pattern","required","title","btn","Component","propsTypes","PropTypes","func","isRequired","connect","contactsOperations","getAllContacts","getFilter","filter","getVisibleContacts","createSelector","normalizedFilter","item","includes","ContactList","fetchContacts","onDeleteContact","length","contactsList","map","contactItem","contactInfo","contactName","onClick","arrayOf","shape","string","contactsSelectors","contactsActions","filterSection","filterInput","App","container","createReducer","_","payload","loading","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.996ad8b6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsList\":\"ContactList_contactsList__14Z-h\",\"contactItem\":\"ContactList_contactItem__EQAbQ\",\"contactInfo\":\"ContactList_contactInfo__2oqwW\",\"contactName\":\"ContactList_contactName__o8qv9\",\"btn\":\"ContactList_btn__1Xk4q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__OrlO3\",\"labelItem\":\"ContactForm_labelItem__19cGw\",\"btn\":\"ContactForm_btn__2Bpnz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterSection\":\"Filter_filterSection__kZIr9\",\"filterInput\":\"Filter_filterInput__u16Kg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};","import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactRequest = createAction('contact/fetchContactRequest');\nexport const fetchContactSuccess = createAction('contact/fetchContactSuccess');\nexport const fetchContactError = createAction('contacts/fetchContactError');\n\nexport const addContactRequest = createAction('contact/addContactRequest');\nexport const addContactSuccess = createAction('contact/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction(\n  'contact/deleteContactRequest',\n);\nexport const deleteContactSuccess = createAction(\n  'contact/deleteContactSuccess',\n);\nexport const deleteContactError = createAction('contacts/deleteontactError');\n\nexport const changeFilter = createAction('contact/changeFilter');\n","import axios from 'axios';\nimport {\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n} from './contacts-actions';\n\naxios.defaults.baseURL = 'http://localhost:3004';\n\nconst fetchContacts = () => dispatch => {\n  dispatch(fetchContactRequest());\n\n  axios\n    .get('/contacts')\n    .then(({ data }) => dispatch(fetchContactSuccess(data)))\n    .catch(error => dispatch(fetchContactError(error)));\n};\n\nconst addContact = (name, number) => dispatch => {\n  const contact = { name, number };\n\n  dispatch(addContactRequest());\n\n  axios\n    .post('/contacts', contact)\n    .then(({ data }) => dispatch(addContactSuccess(data)))\n    .catch(error => dispatch(addContactError(error)));\n};\n\nconst deleteContact = id => dispatch => {\n  dispatch(deleteContactRequest());\n\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(deleteContactSuccess(id)))\n    .catch(error => dispatch(deleteContactError(error)));\n};\n\nexport default { addContact, deleteContact, fetchContacts };\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport contactsOperations from '../../redux/phonebook/contacts-operations';\nimport PropTypes from 'prop-types';\nimport style from './ContactForm.module.css';\n\nclass ContactForm extends Component {\n  static propsTypes = {\n    onSubmit: PropTypes.func.isRequired,\n  };\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = event => {\n    const { name, value } = event.currentTarget;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const { name, number } = this.state;\n\n    const existingName = this.props.state.contacts.items.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n\n    if (!existingName) {\n      this.props.onSubmit(name, number);\n      this.setState({ name: '', number: '' });\n      return;\n    }\n    const message = `${name} is already in contacts`;\n    alert(message);\n  };\n\n  render() {\n    return (\n      <section>\n        <form className={style.contactForm} onSubmit={this.handleSubmit}>\n          <label className={style.labelItem}>\n            Name\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={this.state.name}\n              onChange={this.handleChange}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              // title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n            />\n          </label>\n          <label className={style.labelItem}>\n            Number\n            <input\n              type=\"tel\"\n              name=\"number\"\n              value={this.state.number}\n              onChange={this.handleChange}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n              required\n            />\n          </label>\n          <button type=\"submit\" className={style.btn}>\n            Add contact{' '}\n          </button>\n        </form>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  state,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: (name, number) =>\n    dispatch(contactsOperations.addContact(name, number)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import { createSelector } from 'reselect';\n\nconst getAllContacts = state => state.contacts.items;\n\nconst getFilter = state => state.contacts.filter;\n\nconst getVisibleContacts = createSelector(\n  [getAllContacts, getFilter],\n  (items, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return items.filter(item =>\n      item.name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n\nexport default {\n  getAllContacts,\n  getFilter,\n  getVisibleContacts,\n};\n\n// const getVisibleContacts = state => {\n//     const items = getAllContacts(state);\n//     const filter = getFilter(state);\n//     const normalizedFilter = filter.toLowerCase();\n\n//     return items.filter(item =>\n//     item.name.toLowerCase().includes(normalizedFilter),\n//   );\n// }\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport contactsOperations from '../../redux/phonebook/contacts-operations';\nimport contactsSelectors from '../../redux/phonebook/contacts-selectors';\nimport PropTypes from 'prop-types';\nimport style from './ContactList.module.css';\n\nclass ContactList extends Component {\n  static propsTypes = {\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n      }).isRequired,\n    ),\n    onDeleteContact: PropTypes.func.isRequired,\n  };\n\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    const { items, onDeleteContact } = this.props;\n\n    return (\n      <section>\n        {items.length !== 0 ? (\n          <ul className={style.contactsList}>\n            {items.map(({ id, name, number }) => (\n              <li key={id} className={style.contactItem}>\n                <div className={style.contactInfo}>\n                  <p className={style.contactName}>{name}:</p>\n                  <p>{number}</p>\n                </div>\n                <button\n                  className={style.btn}\n                  type=\"button\"\n                  onClick={() => onDeleteContact(id)}\n                >\n                  Delete\n                </button>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p>Phonebook is empty</p>\n        )}\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  items: contactsSelectors.getVisibleContacts(state),\n});\n\nconst mapDispatchtoProps = dispatch => ({\n  onDeleteContact: id => dispatch(contactsOperations.deleteContact(id)),\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchtoProps)(ContactList);\n","import { connect } from 'react-redux';\nimport * as contactsActions from '../../redux/phonebook/contacts-actions';\nimport contactsSelectors from '../../redux/phonebook/contacts-selectors';\nimport PropTypes from 'prop-types';\nimport style from './Filter.module.css';\n\nconst Filter = ({ value = ' ', onChange }) => {\n  return (\n    <div className={style.filterSection}>\n      <label>\n        Find contacts by name\n        <input\n          className={style.filterInput}\n          type=\"text\"\n          value={value}\n          onChange={onChange}\n        ></input>\n      </label>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  value: contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: event =>\n    dispatch(contactsActions.changeFilter(event.currentTarget.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\nimport style from './App.module.css';\n\nconst App = () => {\n  return (\n    <section className={style.container}>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </section>\n  );\n};\n\nexport default App;\n","import { createReducer } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport {\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  changeFilter,\n} from './contacts-actions';\n\nconst items = createReducer([], {\n  [fetchContactSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nconst loading = createReducer(false, {\n  [fetchContactRequest]: () => true,\n  [fetchContactSuccess]: () => false,\n  [fetchContactError]: () => false,\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n  loading,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n// import storage from 'redux-persist/lib/storage';\nimport contactsReducer from './phonebook/contacts-reducer';\nimport logger from 'redux-logger';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\n// const phonebookPersistConfig = {\n//   key: 'contacts',\n//   storage,\n//   blacklist: ['filter'],\n// };\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV !== 'production',\n});\n\n// const persistor = persistStore(store);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}